@model ServisTakipMVC.MODEL.Musteri

@{
    ViewBag.Title = "Yeni Müşteri";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <div class="col-md-6">
        <!-- general form elements -->
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Müşteri Bilgileri</h3>
            </div><!-- /.box-header -->
            <!-- form start -->
            <form role="form" method="post">
                @Html.AntiForgeryToken()
                <div class="card-body">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        <label for="firmaadi">Firma Adı</label>
                        @Html.EditorFor(model => model.FirmaAdi, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirmaAdi, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Telefon</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-phone"></i></span>
                            </div>
                            @Html.EditorFor(model => model.Telefon, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Telefon, "", new { @class = "text-danger" })
                        </div><!-- /.input group -->
                    </div><!-- /.form group -->

                    <div class="form-group">
                        <label>Telefon2</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-phone"></i></span>
                            </div>
                            @Html.EditorFor(model => model.Telefon2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Telefon2, "", new { @class = "text-danger" })
                        </div><!-- /.input group -->
                    </div><!-- /.form group -->

                    <div class="form-group">
                        <label>Cep Telefonu</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-mobile-alt"></i></span>
                            </div>
                            @Html.EditorFor(model => model.GsmNo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.GsmNo, "", new { @class = "text-danger" })
                        </div><!-- /.input group -->
                    </div><!-- /.form group -->

                    <div class="form-group">
                        <label>Faks</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-fax"></i></span>
                            </div>
                            @Html.EditorFor(model => model.Faks, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Faks, "", new { @class = "text-danger" })
                        </div><!-- /.input group -->
                    </div><!-- /.form group -->

                    <div class="form-group">
                        <label for="yetkili">Yetkili</label>
                        @Html.EditorFor(model => model.Yetkili, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Yetkili, "", new { @class = "text-danger" })
                    </div>


                    <div class="form-group">
                        <label for="email">Email</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-at"></i></span>
                            </div>
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="url">Web Sitesi</label>
                        @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Adres</label>
                        @Html.TextAreaFor(model => model.Adres, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Adres, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Not</label>
                        @Html.TextAreaFor(model => model.Notlar, new { @class = "form-control" })

                        @Html.ValidationMessageFor(model => model.Notlar, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Bayi</label>
                        @Html.DropDownListFor(model => model.BayiId, ViewBag.Bayiler as SelectList, "Seçiniz...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BayiId, "", new { @class = "text-danger" })
                    </div>

                </div><!-- /.box-body -->

                <div class="card-footer">
                    <button type="submit" class="btn btn-primary">Kaydet</button>
                </div>
            </form>
        </div><!-- /.box -->
        <div>
            @Html.ActionLink("Müşteri listesine geri dön", "Index")
        </div>
    </div>
</div>

@section extraJS
{
    <script>
        $(function () {
            //Initialize Select2 Elements
            $('.select2').select2()

            //Initialize Select2 Elements
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })

            //Datemask dd/mm/yyyy
            $('#datemask').inputmask('dd/mm/yyyy', { 'placeholder': 'dd/mm/yyyy' })
            //Datemask2 mm/dd/yyyy
            $('#datemask2').inputmask('mm/dd/yyyy', { 'placeholder': 'mm/dd/yyyy' })
            //Money Euro
            $('[data-mask]').inputmask()

            //Date range picker
            $('#reservation').daterangepicker()
            //Date range picker with time picker
            $('#reservationtime').daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                locale: {
                    format: 'MM/DD/YYYY hh:mm A'
                }
            })
            //Date range as a button
            $('#daterange-btn').daterangepicker(
                {
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    startDate: moment().subtract(29, 'days'),
                    endDate: moment()
                },
                function (start, end) {
                    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'))
                }
            )

            //Timepicker
            $('#timepicker').datetimepicker({
                format: 'LT'
            })

            //Bootstrap Duallistbox
            $('.duallistbox').bootstrapDualListbox()

            //Colorpicker
            $('.my-colorpicker1').colorpicker()
            //color picker with addon
            $('.my-colorpicker2').colorpicker()

            $('.my-colorpicker2').on('colorpickerChange', function (event) {
                $('.my-colorpicker2 .fa-square').css('color', event.color.toString());
            });

            $("input[data-bootstrap-switch]").each(function () {
                $(this).bootstrapSwitch('state', $(this).prop('checked'));
            });

        })
    </script>
}